{"version":3,"sources":["main.js"],"names":["getInputValue","id","document","getElementById","value","encrypt","text","replace","decrypt","processText","operation","processedText","resultElement","innerHTML","classList","add","copyText","navigator","clipboard","writeText","then","alert","catch","error","console","addEventListener","event","preventDefault"],"mappings":";AAIA,SAASA,EAAcC,GACnB,OAAOC,SAASC,eAAeF,GAAIG,MAGvC,SAASC,EAAQC,GAMb,OALoBA,EAAKC,QAAQ,KAAM,SACpCA,QAAQ,KAAM,QACdA,QAAQ,KAAM,MACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QAIrB,SAASC,EAAQF,GAMb,OALoBA,EAAKC,QAAQ,SAAU,KACxCA,QAAQ,QAAS,KACjBA,QAAQ,MAAO,KACfA,QAAQ,QAAS,KACjBA,QAAQ,QAAS,KAIxB,SAASE,EAAYH,EAAMI,GACvB,IACIC,EADEC,EAAgBV,SAASC,eAAe,UAI1CQ,EADc,YAAdD,EACgBL,EAAQC,GAERE,EAAQF,GAG5BM,EAAcC,UAAYF,EAC1BC,EAAcE,UAAUC,IAAI,UAiBhC,SAASC,IACL,IAAMV,EAAOJ,SAASC,eAAe,UAAUU,UAC/CI,UAAUC,UAAUC,UAAUb,GAAMc,KAAK,WACrCC,MAAM,+CACPC,MAAM,SAACC,GACNC,QAAQD,MAAM,SAAUA,KAlBhCrB,SAASC,eAAe,iBAAiBsB,iBAAiB,QAAS,SAACC,GAChEA,EAAMC,iBAENlB,EADaT,EAAc,sBACT,aAGtBE,SAASC,eAAe,iBAAiBsB,iBAAiB,QAAS,SAACC,GAChEA,EAAMC,iBAENlB,EADaT,EAAc,sBACT,aAatBE,SAASC,eAAe,cAAcsB,iBAAiB,QAAST","file":"main.560cd7bc.js","sourceRoot":"..\\src","sourcesContent":["/* eslint-disable eol-last */\r\n/* eslint-disable linebreak-style */\r\n/* eslint-disable indent */\r\n\r\nfunction getInputValue(id) { // Get the value of an input field by id\r\n    return document.getElementById(id).value; // Return the value of the input field\r\n}\r\n\r\nfunction encrypt(text) {\r\n    let encryptedText = text.replace(/e/g, \"enter\")\r\n      .replace(/i/g, \"imes\")\r\n      .replace(/a/g, \"ai\")\r\n      .replace(/o/g, \"ober\")\r\n      .replace(/u/g, \"ufat\");\r\n    return encryptedText;\r\n}\r\n\r\nfunction decrypt(text) {\r\n    let decryptedText = text.replace(/enter/g, \"e\")\r\n      .replace(/imes/g, \"i\")\r\n      .replace(/ai/g, \"a\")\r\n      .replace(/ober/g, \"o\")\r\n      .replace(/ufat/g, \"u\");\r\n    return decryptedText;\r\n}\r\n\r\nfunction processText(text, operation) {\r\n    const resultElement = document.getElementById('result');\r\n    let processedText;\r\n\r\n    if (operation === 'encrypt') {\r\n        processedText = encrypt(text);\r\n    } else {\r\n        processedText = decrypt(text);\r\n    }\r\n\r\n    resultElement.innerHTML = processedText;\r\n    resultElement.classList.add('result'); // Agrega la clase 'result' al elemento resultante\r\n}\r\n\r\n// Add click event listeners to the encrypt and decrypt buttons\r\ndocument.getElementById('encryptButton').addEventListener('click', (event) => {\r\n    event.preventDefault();\r\n    const text = getInputValue('textWithoutEncrypt');\r\n    processText(text, 'encrypt');\r\n});\r\n\r\ndocument.getElementById('decryptButton').addEventListener('click', (event) => {\r\n    event.preventDefault();\r\n    const text = getInputValue('textWithoutEncrypt');\r\n    processText(text, 'decrypt');\r\n});\r\n\r\n// Function to copy text\r\nfunction copyText() {\r\n    const text = document.getElementById('result').innerHTML;\r\n    navigator.clipboard.writeText(text).then(() => {\r\n        alert('El texto se ha copiado a tu portapapeles.');\r\n    }).catch((error) => {\r\n        console.error('Error:', error);\r\n    });\r\n}\r\n\r\ndocument.getElementById('copyButton').addEventListener('click', copyText);\r\n"]}